{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "$id": "ubereats-ordering-restaurantmappings.schema.json",
    "title": "Restaurantmappings",
    "description": "Restaurantmappings for UberEats Ordering Integrator",
    "type": "object",
    "properties": {
        "defaultApiEndpoint": {
            "description": "Default API endpoint configuration which applies to all restaurant mappings of this file and in case of the master file to all group files (optional; if missing then either the group MUST define a default API endpoint configuration or a concrete restaurant mapping MUST define an API endpoint configuration)",
            "type": "object",
            "properties": {
                "baseUrl": {
                    "description": "The base URL of Ordering API (mandatory; if missing then any inherited base URL applies)",
                    "type": "string"
                },
                "token": {
                    "description": "The bearer token for accessing the Ordering API (mandatory; if missing then any inherited token applies)",
                    "type": "string"
                },
                "hostHeader": {
                    "description": "The value of the Host HTTP header for selecting an instance of Ordering API in a Tomcat which hosts different instances of Ordering API (optional; if missing or null then any inherited host header applies; if empty string then it removes any inherited host header)"
                }
            }
        },
        "defaultApiRestaurant": {
            "description": "Default API restaurant configuration which applies to all restaurant mappings of this file and in case of the master file to all group files (optional; if missing then either the group MUST define a default API restaurant configuration or a concrete restaurant mapping MUST define an API restaurant configuration)",
            "type": "object",
            "properties": {
                "id": {
                    "description": "ID of the API restaurant",
                    "type": "integer",
                    "exclusiveMinimum": 0
                },
                "source": {
                    "description": "The order source which the menu is generated for in Uber Eats (optional; \"UBER_EATS\" if missing)",
                    "type": "string"
                },
                "brand": {
                    "description": "The brand which the menu is generated for in Uber Eats",
                    "type": "string",
                    "enum": [
                        "KFC",
                        "PH"
                    ]
                },
                "menuLanguage": {
                    "description": "The language in which the menu is generated in Uber Eats (optional; en if missing)",
                    "type": "string",
                    "examples": [
                        "pl",
                        "cs",
                        "hu",
                        "en"
                    ]
                },
                "lat": {
                    "description": "The latitude of the restaurant's geolocation (mandatory)",
                    "type": "string"
                },
                "lng": {
                    "description": "The longitude of the restaurant's geolocation (mandatory)",
                    "type": "string"
                },
                "timeZone": {
                    "description": "The identifier of the restaurant's time zone from the Olson database (see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones ) (optional; default time zone of the server if missing)",
                    "type": "string",
                    "examples": [
                        "Europe/Warsaw",
                        "Europe/Prague",
                        "Europe/Berlin"
                    ]
                },
                "deliveryFeeProductId": {
                    "description": "The identifier of a delivery fee product (optional; no delivery fee is passed from Uber Eats to Ordering API if missing)",
                    "type": "integer",
                    "exclusiveMinimum": 1
                }
            }
        },
        "defaultUberEatsEndpoint": {
            "description": "Overrides the default API endpoint configuration from Spring Boot's configuration (optional; if missing then the default Uber Eats endpoint configuration is used)",
            "type": "object",
            "properties": {
                "loginBaseUrl": {
                    "description": "The base URL of Uber Eats' Login API (optional; if missing then the default login base URL applies from ubereats.properties)",
                    "type": "string"
                },
                "apiBaseUrl": {
                    "description": "The base URL of Uber Eats' API (optional; if missing then the default login base URL applies from ubereats.properties)",
                    "type": "string"
                },
                "clientId": {
                    "description": "The client ID for Uber Eats (optional; if missing then the default client ID applies from ubereats.properties)",
                    "type": "string"
                },
                "clientSecret": {
                    "description": "The client secret for Uber Eats (optional; if missing then the default client secret applies from ubereats.properties)",
                    "type": "string"
                }
            }
        },
        "defaultTranslations": {
            "description": "Translation templates per language (optional; if missing then the specific restaurant mapping's translations apply; otherwise these translations are merged with eventually existing translations from specific mappings)",
            "type": "object",
            "patternProperties": {
                ".*": {
                    "description": "Selects a language. \"default\" is used as a fallback language, if for a restaurant's menu language there is not found any translation template",
                    "type": "object",
                    "examples": [
                        "default|pl|cs|hu|en"
                    ],
                    "properties": {
                        "condimentCategoryName": {
                            "description": "The fixed text for names of extras and condiment groups (optional; if missing then the value coming from Ordering API is used)",
                            "type": "string"
                        },
                        "defaultMenuName": {
                            "description": "The fixed text for the restaurant's default menu name (optional; if missing then \"Menu\")",
                            "type": "string"
                        },
                        "fallbackSpecialtyOptionName": {
                            "description": "A fallback text for specialty choices if such an API option has no title, e.g. in pizza sets (optional; if missing then \"Specialty\" is used as the default value independently of the chosen menu language)",
                            "type": "string"
                        },
                        "fallbackDoughOptionName": {
                            "description": "A fallback text for dough choices if such an API option has no title, e.g. in a pizza (optional; if missing then \"Dough\" is used as the default value independently of the chosen menu language)",
                            "type": "string"
                        },
                        "fallbackToppingCategoryOptionName": {
                            "description": "A fallback text for topping categories if such an API option has no title, e.g. in a pizza (optional; if missing then \"Choose what you like\" is used as the default value independently of the chosen menu language)",
                            "type": "string"
                        },
                        "fallbackComboGroupOptionName": {
                            "description": "A fallback text for choices if such an API option has no title, e.g. in sets (optional; if missing then \"Choose what you like\" is used as the default value independently of the chosen menu language)",
                            "type": "string"
                        }
                    }
                }
            }
        },
        "defaultFeatures": {
            "description": "Feature toggles (optional; if missing then the specific restaurant mapping's feature toggles apply; otherwise these features are merged with eventually existing features from specific mappings)",
            "type": "object",
            "properties": {
                "sync.condiments": {
                    "description": "Enables or disables the inclusion of condiments in menus. Nevertheless condiments are accepted in orders to allow for a transition period between configuration changes and the next menu import (optional; if missing then disabled)",
                    "type": "boolean"
                },
                "sync.menuRestrictions": {
                    "description": "Enables or disables the scheduler for menu restriction updates (optional; if missing then enabled)",
                    "type": "boolean"
                },
                "sync.fullMenu": {
                    "description": "Enables the full menu (with breakfast support) or disables it and synchronizes only the current menu at the moment of importing the menu (optional; if missing then disabled)",
                    "type": "boolean"
                }
            }
        },
        "mappings": {
            "description": "Mapping for the restaurants",
            "type": "array",
            "items": {
                "type": "object",
                "properties": {
                    "active": {
                        "description": "A flag indicating whether to use or ignore the restaurant mapping (optional; if missing then the default value is true)",
                        "type": "boolean"
                    },
                    "uberEatsStore": {
                        "description": "UberEats restaurant attributes",
                        "type": "object",
                        "properties": {
                            "id": {
                                "description": "ID of the Uber Eats store, this is NOT necessarily the identifier in Uber Eats's store site's URL",
                                "type": "string"
                            }
                        }
                    },
                    "apiRestaurant": {
                        "description": "Api Restaurant configuration",
                        "type": "object",
                        "properties": {
                            "id": {
                                "description": "ID of the API restaurant",
                                "type": "integer",
                                "exclusiveMinimum": 0
                            },
                            "source": {
                                "description": "The order source which the menu is generated for in Uber Eats (optional; \"UBER_EATS\" if missing)",
                                "type": "string"
                            },
                            "brand": {
                                "description": "The brand which the menu is generated for in Uber Eats",
                                "type": "string",
                                "enum": [
                                    "KFC",
                                    "PH"
                                ]
                            },
                            "menuLanguage": {
                                "description": "The language in which the menu is generated in Uber Eats (optional; en if missing)",
                                "type": "string",
                                "examples": [
                                    "pl",
                                    "cs",
                                    "hu",
                                    "en"
                                ]
                            },
                            "lat": {
                                "description": "The latitude of the restaurant's geolocation (mandatory)",
                                "type": "string"
                            },
                            "lng": {
                                "description": "The longitude of the restaurant's geolocation (mandatory)",
                                "type": "string"
                            },
                            "timeZone": {
                                "description": "The identifier of the restaurant's time zone from the Olson database (see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones ) (optional; default time zone of the server if missing)",
                                "type": "string",
                                "examples": [
                                    "Europe/Warsaw",
                                    "Europe/Prague",
                                    "Europe/Berlin"
                                ]
                            },
                            "deliveryFeeProductId": {
                                "description": "The identifier of a delivery fee product (optional; no delivery fee is passed from Uber Eats to Ordering API if missing)",
                                "type": "integer",
                                "exclusiveMinimum": 1
                            }
                        },
                        "required": [
                            "id",
                            "lat",
                            "lng"
                        ]
                    },
                    "apiEndpoint": {
                        "description": "API endpoint configuration",
                        "type": "object",
                        "properties": {
                            "baseUrl": {
                                "description": "The base URL of Ordering API (mandatory; if missing then any inherited base URL applies)",
                                "type": "string"
                            },
                            "token": {
                                "description": "The bearer token for accessing the Ordering API (mandatory; if missing then any inherited token applies)",
                                "type": "string"
                            },
                            "hostHeader": {
                                "description": "The value of the Host HTTP header for selecting an instance of Ordering API in a Tomcat which hosts different instances of Ordering API (optional; if missing or null then any inherited host header applies; if empty string then it removes any inherited host header)"
                            }
                        }
                    },
                    "translations": {
                        "description": "Restaurant-specific translation templates per language (optional; if missing then any inherited translations apply; otherwise these translations are merged with eventually existing default translations)",
                        "type": "object",
                        "patternProperties": {
                            ".*": {
                                "description": "Selects a language. \"default\" is used as a fallback language, if for a restaurant's menu language there is not found any translation template",
                                "type": "object",
                                "examples": [
                                    "default|pl|cs|hu|en"
                                ],
                                "properties": {
                                    "condimentCategoryName": {
                                        "description": "The fixed text for names of extras and condiment groups (optional; if missing then the value coming from Ordering API is used)",
                                        "type": "string"
                                    },
                                    "defaultMenuName": {
                                        "description": "The fixed text for the restaurant's default menu name (optional; if missing then \"Menu\")",
                                        "type": "string"
                                    },
                                    "fallbackSpecialtyOptionName": {
                                        "description": "A fallback text for specialty choices if such an API option has no title, e.g. in pizza sets (optional; if missing then \"Specialty\" is used as the default value independently of the chosen menu language)",
                                        "type": "string"
                                    },
                                    "fallbackDoughOptionName": {
                                        "description": "A fallback text for dough choices if such an API option has no title, e.g. in a pizza (optional; if missing then \"Dough\" is used as the default value independently of the chosen menu language)",
                                        "type": "string"
                                    },
                                    "fallbackToppingCategoryOptionName": {
                                        "description": "A fallback text for topping categories if such an API option has no title, e.g. in a pizza (optional; if missing then \"Choose what you like\" is used as the default value independently of the chosen menu language)",
                                        "type": "string"
                                    },
                                    "fallbackComboGroupOptionName": {
                                        "description": "A fallback text for choices if such an API option has no title, e.g. in sets (optional; if missing then \"Choose what you like\" is used as the default value independently of the chosen menu language)",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    },
                    "features": {
                        "description": "Feature toggles (optional; if missing then the specific restaurant mapping's feature toggles apply; otherwise these features are merged with eventually existing features from specific mappings)",
                        "type": "object",
                        "properties": {
                            "sync.condiments": {
                                "description": "Enables or disables the inclusion of condiments in menus. Nevertheless condiments are accepted in orders to allow for a transition period between configuration changes and the next menu import (optional; if missing then disabled)",
                                "type": "boolean"
                            },
                            "sync.menuRestrictions": {
                                "description": "Enables or disables the scheduler for menu restriction updates (optional; if missing then enabled)",
                                "type": "boolean"
                            },
                            "sync.fullMenu": {
                                "description": "Enables the full menu (with breakfast support) or disables it and synchronizes only the current menu at the moment of importing the menu (optional; if missing then disabled)",
                                "type": "boolean"
                            }
                        }
                    }
                }
            }
        }
    },
    "additionalProperties": true
}